import time
from identify_input import identify_all_inputs
from selenium.webdriver.common.by import By
from selenium.common.exceptions import TimeoutException, NoSuchElementException
from inputs import *
from element_selectors import button_selectors

def find_and_click_buttons(driver, url):
    # Function to find new visible input fields
    def find_new_inputs(existing_inputs, driver):
        all_inputs = identify_all_inputs(driver)
        return [input_el for input_el in all_inputs if input_el not in existing_inputs]
        

    # Keep track of existing input fields
    existing_inputs = identify_all_inputs(driver)
    # Locate all fields and check their initial visibility
    initially_invisible = {field: not field.is_displayed() for field in existing_inputs}
    
    # Loop through each button selector
    for selector in button_selectors:
        try:
            # Find buttons using the current selector
            buttons = driver.find_elements(By.XPATH, selector)

            for button in buttons:
                try:
                    # Click the button
                    button.click()

                    # Wait for new elements to appear
                    time.sleep(0.5)

                    # Re-check the visibility of the fields
                    for field in existing_inputs:
                        if initially_invisible[field] and field.is_displayed():
                            revealed_fields.append(field)

                    # Find new input fields and print their details
                    new_inputs = find_new_inputs(existing_inputs, driver)

                    # Update the existing inputs list
                    existing_inputs.extend(new_inputs)
                except Exception:
                    continue
                driver.Navigate().GoToUrl(url)
                        
        except (TimeoutException, NoSuchElementException):
            # If no new inputs are found or the selector is not present, continue to the next selector
            continue
    
    for element in set(existing_inputs):
        serialize_index = 1
        if element.get_attribute('name') == '' or element.get_attribute('name') == None:
            new_inputs_map["element" + str(serialize_index)] = element
            serialize_index = serialize_index + 1
        else:
            new_inputs_map[element.get_attribute('name')] = element